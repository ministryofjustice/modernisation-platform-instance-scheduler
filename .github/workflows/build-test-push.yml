name: Build-test-push
on:
  push:
    branches:
      - main
    paths:
      - 'instance-scheduler/**'
      - '.github/workflows/build-test-push.yml'
  pull_request:
    branches:
      - main
    types: [ opened, edited, reopened, synchronize ]
    paths:
      - 'instance-scheduler/**'
      - '.github/workflows/build-test-push.yml'
  workflow_dispatch:
env:
  AWS_REGION: "eu-west-2"
  ACCOUNT_NUMBER: ${{ secrets.CORE_SHARED_SERVICES_ACCOUNT_ID }}
  LAMBDA_ROLE_ARN: "arn:aws:iam::${{ secrets.CORE_SHARED_SERVICES_ACCOUNT_ID }}:role/InstanceSchedulerLambdaFunctionPolicy"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3.1.0
      - name: configure aws credentials and assume github-actions role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "arn:aws:iam::${{ env.ACCOUNT_NUMBER }}:role/github-actions"
          role-session-name: githubactionsrolesession
          aws-region: ${{ env.AWS_REGION }}
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.18'
      - uses: aws-actions/setup-sam@v2
      - name: SAM Validate
        run: |
          sam validate --region ${{ env.AWS_REGION }}
      # Build inside Docker containers
      - name: SAM Build
        run: sam build --use-container --region ${{ env.AWS_REGION }}
      - name: Download Go Modules
        working-directory: instance-scheduler
        run: go mod download
      - name: assume InstanceSchedulerLambdaFunctionPolicy role
        run: |
          aws sts assume-role --role-arn $LAMBDA_ROLE_ARN --role-session-name githubactionsgotestrolesession
      - name: Run Tests
        working-directory: instance-scheduler
        run: go test -v
  push-to-ecr:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: configure aws credentials and assume github-actions role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "arn:aws:iam::${{ env.ACCOUNT_NUMBER }}:role/github-actions"
          role-session-name: githubactionsrolesession
          aws-region: ${{ env.AWS_REGION }}
      - name: SAM Package
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: sam package --image-repository $ACCOUNT_NUMBER.dkr.ecr.eu-west-2.amazonaws.com/instance-scheduler-ecr-repo --output-template-file packaged-template.yaml
      - name: Add the `latest` tag to the container image
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: docker tag instanceschedulerfunction:1.0 $ACCOUNT_NUMBER.dkr.ecr.eu-west-2.amazonaws.com/instance-scheduler-ecr-repo:latest
      - name: Login to ECR
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ACCOUNT_NUMBER.dkr.ecr.eu-west-2.amazonaws.com
      - name: Push the container image with the `latest` tag to ECR
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: docker push $ACCOUNT_NUMBER.dkr.ecr.eu-west-2.amazonaws.com/instance-scheduler-ecr-repo:latest
      - name: Deploy the latest image
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
          IMAGE_TAG=$(grep -w ImageUri packaged-template.yaml | cut -d: -f3)
          echo "IMAGE_TAG=$IMAGE_TAG"
          aws lambda update-function-code --function-name instance-scheduler-lambda-function --image-uri $ACCOUNT_NUMBER.dkr.ecr.eu-west-2.amazonaws.com/instance-scheduler-ecr-repo:${IMAGE_TAG}
